{"code":"\nasync function startup(state, tools) {\n  tools.reply(\"Hello! Welcome to Singapore!\");\n  state.isWeatherRequested = false; // Set the initial state for weather request\n  state.isAttractionRequested = false; // Set the initial state for attraction request\n  state.isBusRequested = false; // Set the initial state for bus timing request\n  state.isBusTimingRequested = false;// this is needed for bot to work.\n}\n\nfunction processBusArrivalResponse(busArrivalResponse) {\n  if (!busArrivalResponse.data || busArrivalResponse.data.length === 0) {\n    return \"Invalid bus stop number. Please input a valid number.\";\n  }\n\n  const busData = busArrivalResponse.data[0];\n\n  // Extracting relevant information\n  const busServiceNumber = busData.ServiceNo;\n  const nextBusArrival = new Date(busData.NextBus.EstimatedArrival);\n  const nextBus2Arrival = new Date(busData.NextBus2.EstimatedArrival);\n  const nextBus3Arrival = new Date(busData.NextBus3.EstimatedArrival);\n\n  // Calculate arrival times in minutes\n  const now = new Date();\n  const nextBusTimeInMinutes = Math.round((nextBusArrival - now) / 60000);\n  const nextBus2TimeInMinutes = Math.round((nextBus2Arrival - now) / 60000);\n  const nextBus3TimeInMinutes = Math.round((nextBus3Arrival - now) / 60000);\n\n  const responseMessage = {\n    timings: `Bus number ${busServiceNumber} coming in (Minutes):`,\n    nearestBus: nextBusTimeInMinutes,\n    secondNearestBus: nextBus2TimeInMinutes,\n    thirdNearestBus: nextBus3TimeInMinutes\n  };\n\n  return responseMessage;\n}\n\nasync function run(payload, state, tools) {\n  const { isWeatherRequested, isAttractionRequested, isBusRequested, isBusTimingRequested } = state;\n  const userResponse = payload.toLowerCase().trim();\n  if (!isWeatherRequested && !isAttractionRequested && !isBusRequested) {\n    state.isWeatherRequested = true;\n    tools.reply(\"Would you like to get the current temperature and weather updates in Singapore? Please reply with 'yes' or 'no'.\");\n    return;\n  }\n\n  if (isWeatherRequested && !isAttractionRequested &&!isBusRequested) {\n    if (userResponse === 'yes' || userResponse === 'sure') {\n      // API call to get real-time weather for Singapore\n      const apiKey = 'e7ac2efda340b5e50db100daf05ebbaa';\n      // tools.reply(state.latitude);\n      // tools.reply(state.longitude);\n      const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=Singapore&appid=${apiKey}&units=metric`;\n\n      try {\n        // Fetch data from the API\n        const response = await fetch(apiUrl);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n\n        // Process the weather data\n        console.log(data); // log the weather data to the console\n        // You can now use the data object to access different weather properties like temperature, humidity, etc.\n\n        // Extract the weather description and temperature from the data\n        const weatherDescription = data.weather[0].description;\n        const temperature = data.main.temp;\n\n        // Reply to the user with the weather data\n        tools.reply(`The weather in Singapore is currently ${weatherDescription} with a temperature of ${temperature}Â°C.`);\n        tools.reply(\"Would you like attraction suggestions in Singapore? Please reply with 'yes' or 'no'.\");\n        state.isAttractionRequested = true;\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        tools.reply('Oops! Something went wrong while fetching the weather data.');\n      }\n    } else if (userResponse === 'no') {\n      tools.reply('Alright, enjoy!');\n    } else {\n      tools.reply(\"I didn't understand your response. Please reply with 'yes' or 'no'.\");\n    }\n  }\n\n  if (isWeatherRequested && isAttractionRequested && !isBusRequested) {\n    \n    if (userResponse === 'yes' || userResponse === 'sure') {\n      //ask the user to enter the bus service number and bus number\n      const GetAttraction = await tools.GetAttraction({ message: payload });\n  \n      // Reply to the user with the attraction suggestions\n      tools.reply(`Sure! Here are some attraction suggestions for you based on the weather conditions: ${GetAttraction}`);\n      tools.reply(\"Would you like Bus Arrival Timing information? Please reply with 'yes' or 'no'.\");\n      state.isBusRequested = true;\n\n    } else if (userResponse === 'no') {\n      tools.reply('No problem, have a great time in Singapore!');\n    } else {\n      tools.reply(\"I didn't understand your response. Please reply with 'yes' or 'no'.\");\n    }\n  }\n\n  if (isBusRequested) {\n\n    if (userResponse === 'yes'|| userResponse === 'sure') {\n      //ask the user to enter the bus service number and bus number\n      tools.reply(\"Please enter the bus stop number and bus service number in the format 'busStopNumber, busServiceNumber'.\");\n      state.isBusTimingRequested = true;\n      \n    } \n    \n  }\n\nif (isBusTimingRequested) {\n  try {\n       // Extract bus stop number and bus service number from user's message\n        const [busStopNumber, busServiceNumber] = payload.split(\",\").map((part) => part.trim());\n\n       // Call STB API to get bus arrival timings\n       const busArrivalResponse = await BusArrivalTimings(busStopNumber, busServiceNumber);\n\n        // Process API response to generate response for chatbot\n        const chatbotResponse = processBusArrivalResponse(busArrivalResponse);\n\n       // Convert the chatbotResponse object to a JSON string with indentation\n        const jsonString = JSON.stringify(chatbotResponse, null, 2);\n\n      // Replace commas with commas followed by a line break character (\"\\n\")\n      const modifiedString = jsonString.replace(/,/g, \",\\n\");\n    \n      // Send the modified string as a reply\n      tools.reply(modifiedString);\n      tools.reply(\"Enjoy your trip in Singapore!\");\n      \n      } catch (error) {\n        console.error('Error:', error);\n      // Handle any errors and reply with an appropriate message\n        tools.reply('Something went wrong. Please try again later.');\n      }\n\n      \n  }\n  \n  \n  \n}\n\n\n\n\nasync function BusArrivalTimings(busStopNumber, busServiceNumber) {\n  // Replace 'YOUR_API_KEY' with the provided API key\n  const apiKey = '7LxNN5qEmHCpwA17RAjAelrPp6EvS1rU';\n\n  // Endpoint URL for bus arrival timings\n  const url = `https://api.stb.gov.sg/services/transport/v2/bus-arrival/${busStopNumber}/${busServiceNumber}`;\n\n\n  // Set up the headers with the 'X-Api-Key' for authentication\n  const headers = {\n    'X-Api-Key': apiKey\n  };\n\n  try {\n    // Make the API call with 'node-fetch' and the headers\n    const response = await fetch(url, {\n      headers: headers\n    });\n\n    // Check if the API call was successful (status code 200)\n    if (!response.ok) {\n      console.error('API Error:', response.status, response.statusText);\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n\n    // Parse the response as JSON and return it\n    return response.json();\n  } catch (error) {\n    console.error('API Call Error:', error);\n    // If there is an error during the API call, throw the error to be caught in the 'run' function\n    throw error;\n  }\n\n}\n\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n","llmFunctions":[{"functionName":"translateToLocale","description":"Translate a message to the locale language.","arguments":["message","locale"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a translator. Your job is to translate the message to the locale language. The reply should only contain the translated content."},{"role":"user","content":"Locale: {{locale}}\nMessage: {{message}}"}],"stream":false,"parameters":{"maxResponse":500,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0}},{"functionName":"GetAttraction","description":"Give attraction suggestions based on the weather","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Your job is to detect the weather from your previous message. \n\nIf rain or clouds or thunderstorm or drizzle, generate a list of 5 random recommendations of indoor Singapore attractions that are only separated by commas. \n\nElse if sunny or clear sky, generate a list of 5 random recommendations of outdoor Singapore attractions that are only separated by commas. \n\nElse, generate a list of 5 random recommendations of Singapore attractions that are only separated by commas.\n\nReply with the format below in JSON: ###\n{\n\"Recommendations\": \"\", //a string for the name of an attraction\n }\n###"},{"role":"user","content":"Message: {{message}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"BusArrivalTimings","description":"to see if bot is able to guess arrival times","arguments":["bus stop number","bus service number"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"your job is to detect bus arrival times from the bus stop number and bus service number given by user. \n\nthe bus stop number may be represented in the following ways : \n- 5 continuous numeric numbers example: \"83139\" or \"64009\"\n\nthe bus service number can be derived as such : \n- numeric numbers like \"179\"\n- alphanumeric numbers like \"179A\"\n\nif bus stop number is invalid, return \"Please input number again\"\n\nReply in this format below in JSON: ###\n{ \n\"Bus Stop Number\" :  // 5 numerals detected for bus stop number \n\"Arrival times for Bus\" : //integer format for expected arrival time of the bus user asked \n\n}\n### "},{"role":"user","content":"bus stop number : {{bus stop number}}\nbus service number : {{bus service number}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}