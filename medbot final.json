{"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n\nasync function run(payload, state, tools) {\n  const uuid = tools.uuid();\n  await tools.chat_stream(\n    (token) => {\n      tools.streamMessage(uuid, token);\n    },\n    {userMessage: payload}, \n    {\n      memory: tools.getChatHistory(100),\n      externalTool: {\n        \"diagnose_symptoms\": (userMessage) => {\n          return userMessage;\n          // return undefined; TRY??\n        },\n\n        \"appointment_scheduling\": (userMessage) => {\n          return userMessage;\n        },\n\n        \"medical_reminders\": (userMessage) => {\n          return userMessage;\n        },\n\n        \"healthy_tips\": (userMessage) => {\n          return userMessage;\n        }\n      }\n    }\n  )  \n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  tools.reply(\"Hello there, welcome to MedBot. How can I help you today?\");\n  tools.reply(\"Do you want to: check for medical symptoms / schedule a medical appointment / set medication reminders ?\")\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n","llmFunctions":[{"functionName":"yesOrNo","description":"Detect if the answer is yes or no for the question.\n\nFrom this example, you will learn about how you can detect the users' intent from their message. Sometimes it's not as easy as passing the bot the question and the answer and let it guess, you also need to instruct it to think to improve the result.\n\nThis is not the only prompt that works, please feel free to try other prompts and see if you can get better results.\n\nYou can start with making it to only return yes or no to save some tokens.","arguments":["question","answer"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to check if the answer is considered yes or no for the question. \nThe answer may not directly answer the question, you have to think, and answer as much as you can. \nIf you still can't determine, just treat it as no. \nReply with the format below in JSON: ###\n{\n  \"reason\": \"\",  // a string describing why you think it's true or false\n  \"yes\": tru, // or false\n}\n###"},{"role":"user","content":"Question: {{question}}\nAnswer: {{answer}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0}},{"functionName":"chat","description":"A chat bot that replies according to the previous conversation. It's also available to get the current time through external tools.","arguments":["userMessage"],"enableMemory":true,"messageHistory":[{"role":"system","content":"You are a helpful assistant.\nYour name is Nemobot.\nYour reply should be concise, clear, informative and logical.\nWhen you are asked about a question, you MUST think step-by-step. Explain each step in an ordered list.\nYour reply should be in Markdown format."},"memoryPlaceholder",{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":500,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[{"name":"diagnose_symptoms","description":"Prompt users to state medical symptoms. Identify symptoms in user message and predict a list of the 3 most possible medical conditions associated. State 1 piece of professional medical advice. Give 1 more piece of medical advice if prompted.","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"symptoms\": {\n      \"type\": \"string\",\n      \"description\": \"{{userMessage}}\"\n    }\n  },\n  \"required\": [\"symptoms\"],\n  \"additionalProperties\": false\n}"},{"name":"appointment_scheduling","description":"Your job is to help user schedule a medical appointment. If desire to schedule a medical appointment is detected from user message, prompt user for information, consolidate information, then reply back the information in a neat paragraph.","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"appointmentDetails\": {\n      \"type\": \"string\",\n      \"description\": \"{{userMessage}}\"\n    }\n  },\n  \"required\": [\"appointmentDetails\"],\n  \"additionalProperties\": false\n}"},{"name":"medical_reminders","description":"If user indicates interest in making a reminder for medical reasons (medical appointments or reminders to eat medicine), prompt user for details, and finally reply them the details for confirmation.","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"reminders\": {\n      \"type\": \"string\",\n      \"description\": \"{{userMessage}}\"\n    }\n  },\n  \"required\": [\"reminders\"],\n  \"additionalProperties\": false\n}"},{"name":"healthy_tips","description":"Offer 1 random healthy lifestyle tips if prompted","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {\n  }\n}"}]}]}